#include<iostream>
#include<string>

int main()
{
	std::cout << "Please enter your first name : ";

	std::string name;
		/*
			name -> 변수(인스턴스) -> 이름이 있는 객체 -> 타입이 정해전 컴퓨터 메모리의 일부
			객체와 변수를 구분하는것은 중요! -> 이름이 없는 객체

			변수(인스턴스) 사용하려면 변수 이름과 타입을 모두 알려줘야함 ->
				머신언어 로의 번역을 수월하게 하려면 해줘야하는게 맞음 + 의도치않은 오류를 방지 
		*/

	/*
		std:: string name;
			-> 선언문(정의문) -> 위치에따라 변수의 특성을 달리함 -> 지역변수 , 전역
			컴파일러가 같은 레벨의 } 도달하면 소멸.(+ 스택메모리 한정)
	*/

	/*
		객체의 타입에는 (interface)개념이 포함되어있음 -> 인터페이스 어떠한 타입의 객체로 할수있는 동작들의 모임
		string 타입은 -> string의 라이브러리에 있는 모든기능들을 수행가능
	*/

	std::cin >> name;
	/*
		초기화 : 초기화 하지 않았다면 empty문자열 , nullptr

	*/

	/*
		>> 연산자는 표준 입력으로 문자열을 읽어서, std::cin name이라는 어느 객체의 값에 저장하는 역할을 합니다.
		문자열을 읽도록 라이브러리에 요청을하면 공백문자를 무시하고 다음 공백문자나 EOF(End of File)

		입력동작에서 발생하는 부수효과
		 -> 입출력 라이브러리는 출력작업을 최적화하기위해 버퍼(buffer)라는 내부 데이터 구조를 활용 각 출력 요청에 효울적인
		응답을 위해 버퍼를 사용해서 문자를 모아놓음 -> 필요할때만 출력후에 버퍼를 비움

		의도치 않은 버퍼초기화
			1. 버퍼용량의 초과
			2. 라이브러리가 표준입력 스트림으로 입력요청을 받으면 저장된 버퍼를 지움
			3. 개발자가 초기화하라고시킴

		버퍼관리를 해야하는이유
			실행시간이 긴 프로그램을 이용하면 -> 비효울적인 메모리관리 임.
	*/
	



	return 0;
}