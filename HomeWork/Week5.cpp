/*
성능에 대한 참고사항 (부록같은 느낌?)

다른 프로그래밍 언어 에서는 연관컨테이너를 해시테이블(hash table)이라는 데이터 구조로 구현함 
	pair보다 훨씬 빠르지만,

	1.각 키 값에따라 알맞은 정숫값을 계산하는 해시함수가 존재해야함
	2. 해시 테이블의 성능은 해시함수가 결정
	3. 해시 테이블의 요소들을 의미있는 순서로 탐색하기 쉽지않음 -> c++의 연관컨테이너는 해시테이블로 구현하지 어려움 ->해줄맘 없음 나중에 내공이 쌓이면 아 이래서 안하는구나 싶을거임
	4. 키 타입은<연산자나 동등성을 비교하는 함수만 있으면 됨.
	5. 주어진 키로 연관 컨테이너에 요소에 접근하는데 걸리는 시간은 키값에 관계없이 요소의 갯수가 커질수록 무지막지하게 커짐
	6. 연관 컨테이너의 요소들은 한상 키의 순서에따라 정렬

	뭐 이런 서로간의 특징이있는대
	객관적인 성능을 비교하면 해시테이블보다 떨어지는게 맞음.(반박시 컴알못)
	그럼에도 다른 데이터 구조들보다는 못하진 않고 뭐,,, 해시함수 짤필요도없고,,, 정렬도 알아서 해주니까! 그냥 쓰는걸지도?

	근대 사실 이거 잘 안쓰고
	트리구조를 쓰긴하는대 이건 뭐 자료구조에서 배우시고
	뭐암튼 그럼



*/

/*
	1.단어의 빈도 출력 프로그램을 확장하여 등장횟수로 정렬하여 출력하는 프로그램을 만들어라(한번등장 단어, 두번등장한 모든 단어들의 순서로 모아 놓아야함)

	2. project 0820을 확장하여 최종점수를 A 90~100 B 80~90~~~F<60 의 국룰 학점으로 변환하여 출력하는 프로그램을 작성하라,
			(class2의 프로젝트)
	3. 상호참조 프로그램을 개선해보아라. 기존 버전에서는 같은 입력행에 하나의 단어가 여러번 등장했을때 해당 행을 여러번 기록한다. 이번에는 같은 입력행에 하나의 단어가 여러번 등장했을때 행번호를 한번만 기록하도록 하는 코드를 작성하라.

	4. 입력파일의 크기가 매우클때 상호참조 프로그램이 만든 출력물이 보기 흉하다! 행이 너무 많을때 출력결과를 보기 좋게 맘대로 바꿔라
		(한번 잘 알아서 꾸며 봐요, 그대로도 이쁘다면,, 뭐 안해도 되지만,,,)
	5. 2개의 백터를 사용하도록 gne_sentence를 다시구현하라. 백터 한대는 온전히 확장해 만든 문장을 저장하고, 나머지 백터는 규칙을 저장하고 스택으로 사용된다. (재귀적 호출을 사용하지 마시오)

	6. 행하나만 있으면 단어를 line변수에 저장하고 여러개의 행이 있으면 단어를 lines에 저장하도록 하는 프로그램을 작성하라. xref를 잘 변형하면 될것입니다.

	7. 상호참조 프로그램을 바꿔 파일의 모든URL을 찾고, 각 URL이 등장하는 모든 행을 출력하여라.

	8. nrand함수대신 알려준 난수생성 방식을 이용하여 출력하도록 프로그램을 수정해보아라.


*/